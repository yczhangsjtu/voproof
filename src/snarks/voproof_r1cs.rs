///! This file is generated by scripts/main.py
use super::*;








pub struct R1CSProverKey<'a, E: PairingEngine> {
    pub verifier_key: R1CSVerifierKey<E>,
    pub powers: Powers<'a, E>,
    pub max_degree: u64,
    pub M_mat: (Vec<u64>, Vec<u64>, Vec<E::Fr>),
    pub u_vec: Vec<E::Fr>,
    pub w_vec: Vec<E::Fr>,
    pub v_vec: Vec<E::Fr>,
    pub y_vec: Vec<E::Fr>,
}

pub struct R1CSVerifierKey<E: PairingEngine> {
    pub cm_u_vec: Commitment<E>,
    pub cm_w_vec: Commitment<E>,
    pub cm_v_vec: Commitment<E>,
    pub cm_y_vec: Commitment<E>,
    pub kzg_vk: VerifierKey<E>,
    pub size: R1CSSize,
}

pub struct R1CSProof<E: PairingEngine> {
    pub cm_u_vec_1: Commitment<E>,
    pub cm_s_vec: Commitment<E>,
    pub cm_h_vec: Commitment<E>,
    pub cm_r_vec_tilde: Commitment<E>,
    pub cm_t: Commitment<E>,
    pub cm_h_1: Commitment<E>,
    pub cm_h_2: Commitment<E>,
    pub y: E::Fr,
    pub y_1: E::Fr,
    pub y_2: E::Fr,
    pub W: KZGProof<E>,
    pub W_1: KZGProof<E>,
}

pub struct VOProofR1CS {}

impl<'a, E: PairingEngine> SNARKProverKey<E> for R1CSProverKey<'a, E> {}

impl<E: PairingEngine> SNARKVerifierKey<E> for R1CSVerifierKey<E> {}

impl<E: PairingEngine> SNARKProof<E> for R1CSProof<E> {}

impl VOProofR1CS {
    fn get_max_degree(size: &R1CSSize) -> usize {
        let H=size.nrows;
        let K=size.ncols;
        let S=size.density;
        
        K + 6*S
    }
}

impl<'a, E: PairingEngine, F: Field> SNARK<E, F> for VOProofR1CS {
    type Size = R1CSSize;
    type CS = R1CS<E::Fr>;
    type PK = R1CSProverKey<'a, E>;
    type VK = R1CSVerifierKey<E>;
    type Ins = R1CSInstance<E::Fr>;
    type Wit = R1CSWitness<E::Fr>;
    type Pf = R1CSProof<E>;

    fn setup(size: usize) -> UniversalParams<E> {
        KZG10::<E, DensePoly<E::Fr>>::setup(size)
    }

    fn index(pp: &UniversalParams<E>, cs: &R1CS<F>)
        -> Result<(R1CSProverKey<'a, E>, R1CSVerifierKey<E>), Error> {
        let max_degree = Self::get_max_degree(cs.get_size());
        assert!(pp.powers_of_g.len() > max_degree);

        let mut powers_of_g = Vec::new();
        // The prover needs both the lowest `max_degree` powers of g,
        // and the highest `max_degree` powers of g, to make sure that
        // some polynomials are bounded by particular degree bounds
        // To save space, store all the needed powers of g in the same
        // vector, because the lower part and the higher part may share
        // common powers of g.
        if pp.powers_of_g.len() >= 2 * (max_degree + 1) {
            powers_of_g = pp.powers_of_g[..=max_degree].to_vec();
            powers_of_g.append(pp.powers_of_g[pp.powers_of_g.len()-max_degree-1..]);
        } else {
            powers_of_g = pp.powers_of_g[..].to_vec();
        }
        let size = cs.get_size();
        let H=size.nrows;
        let K=size.ncols;
        let S=size.density;
        let gamma=F::GENERATOR;
        let M_mat=(cs.arows.iter().chain(cs.brows.iter().map(|i| i + H)).chain(cs.crows.iter().map(|i| i + H * 2)).collect::<Vec<u64>>(), cs.acols.iter().chain(cs.bcols).chain(cs.ccols).collect::<Vec<u64>>(), cs.avals.iter().chain(cs.bvals).chain(cs.cvals).collect::<Vec<F>>());
        let u_vec=(1..=3*S).map(|i| power(gamma, M_mat.0[i] as i64)).collect::<Vec<F>>();
        let w_vec=(1..=3*S).map(|i| power(gamma, M_mat.1[i] as i64)).collect::<Vec<F>>();
        let v_vec=M_mat.2;
        let y_vec=u_vec.iter().zip(w_vec).map(|a, b| a * b).collect::<Vec<F>>();
        let cm_u_vec=vector_to_commitment(u_vec);
        let cm_w_vec=vector_to_commitment(w_vec);
        let cm_v_vec=vector_to_commitment(v_vec);
        let cm_y_vec=vector_to_commitment(y_vec);
        
        let verifier_key = R1CSVerifierKey::<E> {
            cm_u_vec: cm_u_vec,
            cm_w_vec: cm_w_vec,
            cm_v_vec: cm_v_vec,
            cm_y_vec: cm_y_vec,
            kzg_vk: VerifierKey {
                g: pp.powers_of_g[0],
                h: pp.h,
                beta_h: pp.beta_h,
                prepared_h: pp.prepared_h.clone(),
                prepared_beta_h: pp.prepared_beta_h.clone(),
            },
            size,
        };
        Ok((R1CSProverKey::<E> {
            verifier_key,
            powers: powers_of_g,
            max_degree,
            M_mat: M_mat,
            u_vec: u_vec,
            w_vec: w_vec,
            v_vec: v_vec,
            y_vec: y_vec,
        }, verifier_key))
    }
    fn prove(pk: &Self::PK, x: &Self::Ins, w: &Self::Wit) -> Result<Self::Pf, Error> {
        let size = pk.verifier_key.size;
        let rng = &mut test_rng();
        let H=size.nrows;
        let K=size.ncols;
        let S=size.density;
        let gamma=F::GENERATOR;
        let delta=sample_field::<F, _>(rng);
        let delta_1=sample_field::<F, _>(rng);
        let delta_2=sample_field::<F, _>(rng);
        let delta_3=sample_field::<F, _>(rng);
        let u_vec_1=sparse_mvp(H, K);
        let u_vec_1_poly=fixed_length_vector_iter(u_vec_1, K + 3*S).chain(delta).collect::<Vec<F>>()();
        let cm_u_vec_1=vector_to_commitment(u_vec_1);
        let u_vec_1_poly=poly_from_vec(u_vec_1);
        let mu=hash_to_field(to_bytes!(pk.verifier_key.cm_u_vec, pk.verifier_key.cm_w_vec, pk.verifier_key.cm_v_vec, pk.verifier_key.cm_y_vec, pk.verifier_key.cm_u_vec_1));
        let mut r_vec=(1..=3*H).map(|i| mu-power(gamma, i)).collect::<Vec<F>>();
        batch_inversion(r_vec);
        let c_vec=sparse_mvp(K, 3*H, pk.M_mat.1, pk.M_mat.0, pk.M_mat.2, r_vec);
        let s_vec=r_vec.iter().chain(r_vec.iter().map(|a| -a)).collect::<Vec<F>>()();
        let s_vec_poly=fixed_length_vector_iter(s_vec, K + 3*S).chain(delta_1).collect::<Vec<F>>()();
        let cm_s_vec=vector_to_commitment(s_vec);
        let s_vec_poly=poly_from_vec(s_vec);
        let nu=hash_to_field(to_bytes!(pk.verifier_key.cm_u_vec, pk.verifier_key.cm_w_vec, pk.verifier_key.cm_v_vec, pk.verifier_key.cm_y_vec, pk.verifier_key.cm_u_vec_1, pk.verifier_key.cm_s_vec));
        let mut rnu_vec=(1..=K).map(|i| nu-power(gamma, i)).collect::<Vec<F>>();
        batch_inversion(rnu_vec);
        let h_vec=rnu_vec.iter().chain(pk.u_vec.iter().zip(pk.w_vec).map(|u, w| (mu - u) * (nu - w))).collect::<Vec<F>>();
        let h_vec_poly=fixed_length_vector_iter(h_vec, K + 3*S).chain(delta_2).collect::<Vec<F>>()();
        let cm_h_vec=vector_to_commitment(h_vec);
        let h_vec_poly=poly_from_vec(h_vec);
        let beta=hash_to_field(to_bytes!(pk.verifier_key.cm_u_vec, pk.verifier_key.cm_w_vec, pk.verifier_key.cm_v_vec, pk.verifier_key.cm_y_vec, pk.verifier_key.cm_u_vec_1, pk.verifier_key.cm_s_vec, pk.verifier_key.cm_h_vec));
        define_vec!(r_vec_1, expression_vector!(i, power_linear_combination!(beta, (linear_combination!(F::zero(), to_field::<F>(1), vector_index!(u_vec_1, (i as i64)-(-3*H + 3*S + 1) as i64+1)))*(linear_combination!(F::zero(), to_field::<F>(1), vector_index!(s_vec, (i as i64)-(-3*H + 3*S + 1) as i64+1))), ((linear_combination!(F::zero(), -to_field::<F>(1), vector_index!(h_vec, (i as i64)-(3*S + 1) as i64+1)))*(linear_combination!(F::zero(), to_field::<F>(1), vector_index!(s_vec, (i as i64)-(-3*H + 3*S + 1) as i64+1))))-((linear_combination!(F::zero(), to_field::<F>(1), vector_index!(h_vec, (i as i64)-(1) as i64+1)))*(linear_combination!(F::zero(), to_field::<F>(1), vector_index!(pk.v_vec, (i as i64)-(K + 1) as i64+1))))), K + 3*S));
        let r_vec_tilde=(1..=K + 3*S).scan(F::zero(), |acc, &mut i| {*acc = *acc + (r_vec_1[i - 1]); Some(*acc)}).collect::<Vec<F>>();
        let cm_r_vec_tilde=vector_to_commitment(r_vec_tilde);
        let alpha=hash_to_field(to_bytes!(pk.verifier_key.cm_u_vec, pk.verifier_key.cm_w_vec, pk.verifier_key.cm_v_vec, pk.verifier_key.cm_y_vec, pk.verifier_key.cm_u_vec_1, pk.verifier_key.cm_s_vec, pk.verifier_key.cm_h_vec, pk.verifier_key.cm_r_vec_tilde));
        let cm_t=KZG10::commit(t_poly);
        let omega=hash_to_field(to_bytes!(pk.verifier_key.cm_u_vec, pk.verifier_key.cm_w_vec, pk.verifier_key.cm_v_vec, pk.verifier_key.cm_y_vec, pk.verifier_key.cm_u_vec_1, pk.verifier_key.cm_s_vec, pk.verifier_key.cm_h_vec, pk.verifier_key.cm_r_vec_tilde, pk.verifier_key.cm_t));
        let cm_h_1=KZG10::commit(h_1_poly);
        let cm_h_2=KZG10::commit(h_2_poly);
        let z=hash_to_field(to_bytes!(pk.verifier_key.cm_u_vec, pk.verifier_key.cm_w_vec, pk.verifier_key.cm_v_vec, pk.verifier_key.cm_y_vec, pk.verifier_key.cm_u_vec_1, pk.verifier_key.cm_s_vec, pk.verifier_key.cm_h_vec, pk.verifier_key.cm_r_vec_tilde, pk.verifier_key.cm_t, pk.verifier_key.cm_h_1, pk.verifier_key.cm_h_2));
        
        Ok(R1CSProof::<E> {
            cm_u_vec_1: cm_u_vec_1,
            cm_s_vec: cm_s_vec,
            cm_h_vec: cm_h_vec,
            cm_r_vec_tilde: cm_r_vec_tilde,
            cm_t: cm_t,
            cm_h_1: cm_h_1,
            cm_h_2: cm_h_2,
            y: y,
            y_1: y_1,
            y_2: y_2,
            W: W,
            W_1: W_1,
        })
    }
    fn verify(vk: &Self::VK, x: &Self::Ins, proof: &Self::Pf) -> Result<(), Error> {
        let size = vk.size;
        let H=size.nrows;
        let K=size.ncols;
        let S=size.density;
        let gamma=F::GENERATOR;
        let mu=hash_to_field(to_bytes!(vk.cm_u_vec, vk.cm_w_vec, vk.cm_v_vec, vk.cm_y_vec, vk.cm_u_vec_1));
        let nu=hash_to_field(to_bytes!(vk.cm_u_vec, vk.cm_w_vec, vk.cm_v_vec, vk.cm_y_vec, vk.cm_u_vec_1, vk.cm_s_vec));
        let beta=hash_to_field(to_bytes!(vk.cm_u_vec, vk.cm_w_vec, vk.cm_v_vec, vk.cm_y_vec, vk.cm_u_vec_1, vk.cm_s_vec, vk.cm_h_vec));
        let alpha=hash_to_field(to_bytes!(vk.cm_u_vec, vk.cm_w_vec, vk.cm_v_vec, vk.cm_y_vec, vk.cm_u_vec_1, vk.cm_s_vec, vk.cm_h_vec, vk.cm_r_vec_tilde));
        let omega=hash_to_field(to_bytes!(vk.cm_u_vec, vk.cm_w_vec, vk.cm_v_vec, vk.cm_y_vec, vk.cm_u_vec_1, vk.cm_s_vec, vk.cm_h_vec, vk.cm_r_vec_tilde, vk.cm_t));
        let z=hash_to_field(to_bytes!(vk.cm_u_vec, vk.cm_w_vec, vk.cm_v_vec, vk.cm_y_vec, vk.cm_u_vec_1, vk.cm_s_vec, vk.cm_h_vec, vk.cm_r_vec_tilde, vk.cm_t, vk.cm_h_1, vk.cm_h_2));
        
    }
}


